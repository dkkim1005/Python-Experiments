#!/usr/bin/python2.7
import numpy as np
from sklearn import svm
from sklearn.grid_search import GridSearchCV
import cPickle


class multiClassSVM:
    def __init__(self, C_range, gamma_range, K=10):
        self.C_range = np.array(C_range)
        self.gamma_range = np.array(gamma_range)
        self.grid = GridSearchCV(svm.SVC(), param_grid=dict(gamma=gamma_range,C=C_range), cv=K)
        self.inData = []
        self.classTag = []
        self.numTail = -1

    def insert_data(self, inData, classTag):
        for i,data in enumerate(inData):
            self.inData.append([])
            self.numTail += 1
            for j,datum in enumerate(data):
                self.inData[self.numTail].append(datum)

        for i,data in enumerate(classTag):
            self.classTag.append(data)

    def run(self):
        self.grid.fit(self.inData,self.classTag)
        print "The best parameters are %s with a score of %0.2f"% (self.grid.best_params_,self.grid.best_score_)

    def saveObj(self,nameFile):
        with open(nameFile,'wb') as f:
            cPickle.dump(grid,f)



if __name__ == "__main__":

    def genCircle(numSample, radius, err):
        sample = np.zeros([numSample,2])
        angle = 2.*np.pi*np.random.random(numSample)
        bias_x = err*(np.random.random(numSample) - 0.5)/np.sqrt(2)
        bias_y = err*(np.random.random(numSample) - 0.5)/np.sqrt(2)
        sample[:,0] = radius * np.cos(angle) + bias_x
        sample[:,1] = radius * np.sin(angle) + bias_y

        return sample

    def printCircle(sample,nameFile):
        with open(nameFile,'w') as f:
            for i,dat in enumerate(sample):
                f.write('%f %f\n'%(dat[0],dat[1])) 


    sample1 = genCircle(1000,1,3e-1)
    sample2 = genCircle(1000,3,3e-1)
    sample3 = genCircle(1000,5,3e-1)
    sample4 = genCircle(1000,7,3e-1)
    sample5 = genCircle(1000,9,3e-1)
    sample6 = genCircle(1000,11,3e-1)


    printCircle(sample1,'sample1.out')
    printCircle(sample2,'sample2.out')
    printCircle(sample3,'sample3.out')
    printCircle(sample4,'sample4.out')
    printCircle(sample5,'sample5.out')
    printCircle(sample6,'sample6.out')


    C_range     = np.logspace(0, 5, 2)
    gamma_range = np.logspace(-10, 3, 10)
    train = multiClassSVM(C_range,gamma_range,2)


    train.insert_data(sample1,1*np.ones(len(sample1)))
    train.insert_data(sample2,2*np.ones(len(sample2)))
    train.insert_data(sample3,3*np.ones(len(sample3)))
    train.insert_data(sample4,4*np.ones(len(sample4)))
    train.insert_data(sample5,5*np.ones(len(sample5)))
    train.insert_data(sample6,6*np.ones(len(sample6)))

    train.run()

    # search for support vectors
    totData = train.inData; totTag = train.classTag
    params = train.grid.best_params_
    clf = svm.SVC(C=params['C'],gamma=params['gamma'],kernel='rbf')
    clf.fit(totData,totTag)
    svs = clf.support_vectors_

    with open('support_vectors.out','w') as f:
        for i,sv in enumerate(svs):
            f.write('%f %f\n'%(sv[0],sv[1]))
